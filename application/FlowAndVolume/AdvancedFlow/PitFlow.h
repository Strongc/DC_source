/****************************************************************************/
/*                                                                          */
/*                                                                          */
/*                                 GRUNDFOS                                 */
/*                           DK-8850 BJERRINGBRO                            */
/*                                 DENMARK                                  */
/*               --------------------------------------------               */
/*                Project: Dedicated Controls                               */
/*               --------------------------------------------               */
/*                                                                          */
/*               (C) Copyright Grundfos                                     */
/*               All rights reserved                                        */
/*               --------------------------------------------               */
/*                                                                          */
/*               As this is the  property of  GRUNDFOS  it                  */
/*               must not be passed on to any person not aut-               */
/*               horized  by GRUNDFOS or be  copied or other-               */
/*               wise  utilized by anybody without GRUNDFOS'                */
/*               expressed written permission.                              */
/*                                                                          */
/****************************************************************************/
/* CLASS NAME       : PitFlow                                               */
/*                                                                          */
/* FILE NAME        : PitFlow.cpp                                           */
/*                                                                          */
/* CREATED DATE     : 09-11-2009 dd-mm-yyyy                                 */
/*                                                                          */
/* SHORT FILE DESCRIPTION : Pit Flow                                        */
/*                                                                          */
/****************************************************************************/
/*****************************************************************************
   Protect against multiple inclusion through the use of guards:
 ****************************************************************************/
#ifndef PitFlow_h
#define PitFlow_h

/*****************************************************************************
  SYSTEM INCLUDES
 *****************************************************************************/

/*****************************************************************************
  PROJECT INCLUDES
 *****************************************************************************/

/*****************************************************************************
  LOCAL INCLUDES
 ****************************************************************************/
#include "GeneralCnf.h"
#include "PitFlowCnf.h"
#include "KalmanCalc.h"

/*****************************************************************************
  DEFINES
 *****************************************************************************/
#define HYSTERESIS_TIME  3

/*****************************************************************************
  TYPE DEFINES
 *****************************************************************************/
typedef enum {
  PF_WAIT,
  PF_HYSTERESIS_PLUS,
  PF_HYSTERESIS_MINUS
} PF_STATE_TYPE;

/*****************************************************************************
 * CLASS:
 * DESCRIPTION:
 *
 *****************************************************************************/
class PitFlow
{
  public:
    /********************************************************************
    LIFECYCLE - Default constructor.
    ********************************************************************/
    PitFlow(KalmanCalc *pKalmanCalc);
    /********************************************************************
    LIFECYCLE - Destructor.
    ********************************************************************/
    ~PitFlow();
    /********************************************************************
    ASSIGNMENT OPERATOR
    ********************************************************************/

    /********************************************************************
    OPERATIONS
    ********************************************************************/

    /****************************************************************************
    * INPUT(S)             : Area of the pit. It is assumed that the area is
    *                        uniform with the level.
    * OUTPUT(S)            :
    * DESIGN DOC.          :
    * FUNCTION DESCRIPTION : Function for initialization of the pit estimation
    *                        routine.
    ****************************************************************************/
    void InitPitFlow(float pressureIn);

    /****************************************************************************
    * INPUT(S)             :
    * OUTPUT(S)            :
    * DESIGN DOC.          :
    * FUNCTION DESCRIPTION : Function for updating the flow estimate.
    ****************************************************************************/
    void RunPitFlow(float pressureIn);

    /****************************************************************************
    * INPUT(S)             :
    * OUTPUT(S)            : Flow value.
    * DESIGN DOC.          :
    * FUNCTION DESCRIPTION : Return the pit flow estimate.
    ****************************************************************************/
    float GetPitFlow(void);

  private:
    /********************************************************************
    OPERATIONS
    ********************************************************************/

    /********************************************************************
    ATTRIBUTE
    ********************************************************************/
    /*** Filter implementation ***/
//    PF_STATE_TYPE mState;
//    U8 mTimeDiff;
//    U8 mSampHyst;
//    U8 mSampZero;

//    float mPinOld;
//    float mPinFiltered;
//    float mPinFilteredOld;
//    float mQpitDiff;

    /*** Kalman implementation ***/
    KalmanCalc* mpKalmanCalc;

    U8 mTimeDiff;
    t_calcvar pressureIn_old;
    t_calcvar z[2];
    t_calcvar P[2*2];

    float mQpitEstimated;


  protected:
    /********************************************************************
    OPERATIONS
    ********************************************************************/

    /********************************************************************
    ATTRIBUTE
    ********************************************************************/
};

#endif
