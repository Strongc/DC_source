/** \file MPCWebServer.h
 *
 * Written by: Jesper Larsen, jla@iotech.dk
 * Company: IO Technologies A/S, Egaa, Denmark
 *
 * Project: Grundfos MPC DHCP / IP configuration
 * Projectno.: 5072
 * File: MPCWebServer.h
 *
 * $Log: MPCWebServer.h,v $
 * Revision 1.1.2.4  2005/06/15 09:15:34  jla
 * Added resetPassword method
 *
 * Revision 1.1.2.3  2005/05/27 13:23:51  jla
 * Finished documentation
 *
 * Revision 1.1.2.2  2005/05/26 09:28:14  jla
 * Implemented the class
 *
 * Revision 1.1.2.1  2005/05/14 11:02:25  jla
 * Added a class for the webserver
 *
 */

#ifndef _MPCWEBSERVER_H_
#define _MPCWEBSERVER_H_

#ifndef __PC__

#include "Thread.h"
#include "PasswordConfiguration.h"

#include <string>

#include <rtipapi.h>
#include <webapi.h>
#include <serv.h>

extern "C"
{
	#include <webpages.h> // generated by WebPageGenerator
}

using namespace std;

#define	WEBSERVTASKPRIO			  50			  //!<Priority of webserver task
#define WEBSERVTASKSTACKSIZE	(8*1024)	//!<Size of stack for webserver task

#define MPCUSRPWDSIZE	16						    //!<Max. length of username and password (each)

#define	DEFAULTUSERNAME	"admin"					//!<Default username used when starting
#define	DEFAULTPASSWORD	"admin"					//!<Default password used when starting


/**\brief Encapsulates the RTIP webserver
 *
 * The webserver may be started, and authentication may be set/changed.
 * It's a singleton class.
 *
 * The authentication is applied to all pages used by the server (see MPCWebServer.h).
 * User/password pairs are the same for all pages.
 */
class MPCWebServer : public Thread
{
public:
	virtual ~MPCWebServer();
	static MPCWebServer* getInstance();					//!<Returns pointer to singleton instance

	void start(int interfaceno);						//!<Starts the webserver thread
	void stop();										//!<Stops the webserver and terminates thread

	bool setUsername(const string&);					//!<Set username
	const string& getUsername();							//!<Get current username
	bool setPassword(string& existingpw, string& newpw);	//!<Set new password
  bool setPassword(string& newpw);            //!<Set new password
	void resetPassword();								//!<Reset password to default

	const string& getErrorString();						//!<Get errorstring from setUsername and setPassword

	void enableAuthentication();						//!<Enable authentication
	void disableAuthentication();						//!<Disable authentication

protected:
	MPCWebServer();										//!<Protectec constructor, due to singleton pattern

	virtual void run();									//!<Run method for the Thread

private:
	static MPCWebServer* mpinstance;

	bool mkill;											//!<True if the webserserver thread should be stopped
	bool mfilesysteminit;								//!<True when filesystem has been initialized
	bool mauthenticationenabled;						//!<True when authentication is enabled

	const string mrealm;
	string musername;
	string mpassword;
	string musrpwd;
  
	char mencusrpwd[BASE64_MAX_ENCODED_SIZE(MPCUSRPWDSIZE*2+2)];	//!<Base64 encoded username and password

	struct web_auth_entry mauthinfo[WEBPAGES_NO_OF_PROTECTED_FILES];		//!<RTIP authentication datastructure

	string merrorstring;
};

#endif

#endif //_MPCWEBSERVER_H_
