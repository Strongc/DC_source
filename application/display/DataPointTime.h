/****************************************************************************/
/*                                                                          */
/*                                                                          */
/*                                 GRUNDFOS                                 */
/*                           DK-8850 BJERRINGBRO                            */
/*                                 DENMARK                                  */
/*               --------------------------------------------               */
/*                Project: MPC                                              */
/*               --------------------------------------------               */
/*                                                                          */
/*               (C) Copyright Grundfos                                     */
/*               All rights reserved                                        */
/*               --------------------------------------------               */
/*                                                                          */
/*               As this is the  property of  GRUNDFOS  it                  */
/*               must not be passed on to any person not aut-               */
/*               horized  by GRUNDFOS or be  copied or other-               */
/*               wise  utilized by anybody without GRUNDFOS'                */
/*               expressed written permission.                              */
/****************************************************************************/
/* CLASS NAME       : DataPointTime                                         */
/*                                                                          */
/* FILE NAME        : DataPointTime.H                                       */
/*                                                                          */
/* CREATED DATE     :                                                       */
/*                                                                          */
/* SHORT FILE DESCRIPTION :                                                 */
/****************************************************************************/
/*****************************************************************************
   Protect against multiple inclusion through the use of guards:
 ****************************************************************************/
#ifndef mpcDataPointTime_h
#define mpcDataPointTime_h

/*****************************************************************************
  SYSTEM INCLUDES
 *****************************************************************************/

/*****************************************************************************
  PROJECT INCLUDES
 *****************************************************************************/
#include <cu351_cpu_types.h>

/*****************************************************************************
  LOCAL INCLUDES
 ****************************************************************************/
#include <TimeText.h>
/*****************************************************************************
  DEFINES
 *****************************************************************************/
#define COLON_BLINK_INTERVAL 500

/*****************************************************************************
  TYPE DEFINES
 *****************************************************************************/
namespace mpc
{
  namespace display
  {
    /*****************************************************************************
    * CLASS:
    * DESCRIPTION:
    *
    *****************************************************************************/
    class DataPointTime: public TimeText
    {
      public:
        /********************************************************************
        LIFECYCLE - Default constructor.
        ********************************************************************/
        DataPointTime();
        /********************************************************************
        LIFECYCLE - Destructor.
        ********************************************************************/
        virtual ~DataPointTime();
        /********************************************************************
        ASSIGNMENT OPERATOR
        ********************************************************************/

        /********************************************************************
        OPERATIONS
        ********************************************************************/
        /* --------------------------------------------------
        * Gets the LEDs which this element and the ones below, wants to be on
        * or off. Normaly this is also the keys to react, but it doesn't have
        * to be this way ...
        * --------------------------------------------------*/
        virtual Leds GetLedsStatus();
        /* --------------------------------------------------
        * Gets the keys to which we should react in this element and the
        * elements below. Thereby this is the element to send key messages
        * to for the given keys.
        * --------------------------------------------------*/
        virtual Keys GetLegalKeys();
        /* --------------------------------------------------
        * Handle this key event. Return true if it is taken care of
        * --------------------------------------------------*/
        virtual bool HandleKeyEvent(Keys KeyID);
        /* --------------------------------------------------
        * Returns whether this element is readable/writeable
        * --------------------------------------------------*/
        virtual bool IsReadOnly();

        /* --------------------------------------------------
        * Called by operating system to give time to redraw
        * --------------------------------------------------*/
        virtual void Run(void);
        virtual bool Redraw(void);

        virtual bool RedrawColon(void);
        /* --------------------------------------------------
        * Update is part of the observer pattern
        * --------------------------------------------------*/
        virtual void Update(Subject* Object);
      private:
        /********************************************************************
        OPERATIONS
        ********************************************************************/

        /********************************************************************
        ATTRIBUTE
        ********************************************************************/
        int mSecCounter;
        bool mShowColon;

      protected:
        /********************************************************************
        OPERATIONS
        ********************************************************************/

        /********************************************************************
        ATTRIBUTE
        ********************************************************************/
        int mLastColonPosition;
    };
  }
}
#endif
