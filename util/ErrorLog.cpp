/****************************************************************************/
/*                                                                          */
/*                                                                          */
/*                                 GRUNDFOS                                 */
/*                           DK-8850 BJERRINGBRO                            */
/*                                 DENMARK                                  */
/*               --------------------------------------------               */
/*                Project: MPC                                              */
/*               --------------------------------------------               */
/*                                                                          */
/*               (C) Copyright Grundfos                                     */
/*               All rights reserved                                        */
/*               --------------------------------------------               */
/*                                                                          */
/*               As this is the  property of  GRUNDFOS  it                  */
/*               must not be passed on to any person not aut-               */
/*               horized  by GRUNDFOS or be  copied or other-               */
/*               wise  utilized by anybody without GRUNDFOS'                */
/*               expressed written permission.                              */
/****************************************************************************/
/* CLASS NAME       : ErrorLog                                              */
/*                                                                          */
/* FILE NAME        : ErrorLog.cpp                                          */
/*                                                                          */
/* CREATED DATE     : 29-07-2004  (dd-mm-yyyy)                              */
/*                                                                          */
/* SHORT FILE DESCRIPTION :                                                 */
/****************************************************************************/
/*****************************************************************************
  SYSTEM INCLUDES
 *****************************************************************************/

/*****************************************************************************
  PROJECT INCLUDES
 *****************************************************************************/
#include <ErrorLog.h>
#include <FactoryTypes.h>

/*****************************************************************************
  LOCAL INCLUDES
 ****************************************************************************/

/*****************************************************************************
  DEFINES
 *****************************************************************************/

/*****************************************************************************
  TYPE DEFINES
 *****************************************************************************/

/*****************************************************************************
  INITIALIZE STATIC MEMBERS
 ******************************************************************************/
ErrorLog* ErrorLog::mInstance = 0;

/*****************************************************************************
 *
 *
 *              PUBLIC FUNCTIONS
 *
 *
 *****************************************************************************/

/*****************************************************************************
 * Function - GetInstance
 * DESCRIPTION:
 *
 *****************************************************************************/
ErrorLog* ErrorLog::GetInstance()
{
  if (!mInstance)
  {
    mInstance = new ErrorLog();
  }
  return mInstance;
}
/*****************************************************************************
 * Function
 * DESCRIPTION:
 *
 *****************************************************************************/
void ErrorLog::LogError(ERROR_LOG_ID_TYPE newError)
{
  int index;

  if (!mpErrorLog.IsValid())
    return;

  index = (*mpErrorLog.GetSubject())[0];

  if (index < ERROR_LOG_LENGTH)
  {
    mpErrorLog->SetValue(index+1, newError);
    mpErrorLog->SetValue(0, ++index);
  }
}

/*****************************************************************************
* Function
* DESCRIPTION:
*****************************************************************************/
void ErrorLog::ResetErrorLog()
{
  if (!mpErrorLog.IsValid())
    return;

  for (int i = 0; i <= ERROR_LOG_LENGTH; i++)
  {
    mpErrorLog->SetValue(i, 0);
  }
}

/*****************************************************************************
* Function
* DESCRIPTION:
*****************************************************************************/
void ErrorLog::Update(Subject* pSubject)
{
  /* nothing to do */
}

/*****************************************************************************
* Function
* DESCRIPTION:
*****************************************************************************/
void ErrorLog::SubscribtionCancelled(Subject* pSubject)
{
  /* nothing to do */
}

/*****************************************************************************
* Function
* DESCRIPTION:
*****************************************************************************/
void ErrorLog::ConnectToSubjects(void)
{
  /* nothing to do */
}

/*****************************************************************************
* Function
* DESCRIPTION:
*****************************************************************************/
void ErrorLog::SetSubjectPointer(int Id, Subject* pSubject)
{
  switch (Id)
  {
    case SP_ERROR_LOG_VALUES:
      mpErrorLog.Attach(pSubject);
      ResetErrorLog();
      break;
  }
}

/*****************************************************************************
 *
 *
 *              PRIVATE FUNCTIONS
 *
 *
 ****************************************************************************/

/*****************************************************************************
 * Function - Constructor
 * DESCRIPTION:
 *
 *****************************************************************************/
ErrorLog::ErrorLog()
{
}

/*****************************************************************************
 * Function - Destructor
 * DESCRIPTION:
 *
 ****************************************************************************/
ErrorLog::~ErrorLog()
{
}

/*****************************************************************************
	Implementation of functions which can be called from C and C++
 ****************************************************************************/
void LogError(ERROR_LOG_ID_TYPE newError)
{
  ErrorLog::GetInstance()->LogError(newError);
}

void ResetErrorLog()
{
  ErrorLog::GetInstance()->ResetErrorLog();
}
